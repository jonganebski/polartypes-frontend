[{"/home/jonganebski/github/polartypes-frontend/src/index.tsx":"1","/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts":"2","/home/jonganebski/github/polartypes-frontend/src/components/App.tsx":"3","/home/jonganebski/github/polartypes-frontend/src/router/router.tsx":"4","/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx":"5","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx":"6","/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx":"7","/home/jonganebski/github/polartypes-frontend/src/apollo.ts":"8","/home/jonganebski/github/polartypes-frontend/src/constants.ts":"9","/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx":"10","/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx":"11","/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx":"12","/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx":"13","/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx":"14","/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts":"15","/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts":"16","/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx":"17","/home/jonganebski/github/polartypes-frontend/src/pages/Trip.tsx":"18","/home/jonganebski/github/polartypes-frontend/src/components/Button-add-step.tsx":"19","/home/jonganebski/github/polartypes-frontend/src/helpers.ts":"20","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signin.tsx":"21","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signup.tsx":"22","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-step.tsx":"23","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-trip.tsx":"24","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Set-time-zone.tsx":"25","/home/jonganebski/github/polartypes-frontend/src/components/Cards/Trip.tsx":"26","/home/jonganebski/github/polartypes-frontend/src/components/Cards/Step.tsx":"27","/home/jonganebski/github/polartypes-frontend/src/components/Headers/HomeHeader.tsx":"28","/home/jonganebski/github/polartypes-frontend/src/components/Headers/CommonHeader.tsx":"29","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Background.tsx":"30","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/CloseIcon.tsx":"31","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Calendar.tsx":"32","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Clock.tsx":"33","/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comments.tsx":"34","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/UploadBox.tsx":"35"},{"size":665,"mtime":1608710035710,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1608450751420,"results":"38","hashOfConfig":"37"},{"size":132,"mtime":1608710051560,"results":"39","hashOfConfig":"37"},{"size":745,"mtime":1608710108740,"results":"40","hashOfConfig":"37"},{"size":2556,"mtime":1608808316760,"results":"41","hashOfConfig":"37"},{"size":195,"mtime":1608536237160,"results":"42","hashOfConfig":"37"},{"size":1452,"mtime":1608709137460,"results":"43","hashOfConfig":"37"},{"size":970,"mtime":1608685843080,"results":"44","hashOfConfig":"37"},{"size":526,"mtime":1608860991300,"results":"45","hashOfConfig":"37"},{"size":480,"mtime":1608870180250,"results":"46","hashOfConfig":"37"},{"size":5404,"mtime":1608808318140,"results":"47","hashOfConfig":"37"},{"size":904,"mtime":1608590422580,"results":"48","hashOfConfig":"37"},{"size":304,"mtime":1608557526610,"results":"49","hashOfConfig":"37"},{"size":334,"mtime":1608788434100,"results":"50","hashOfConfig":"37"},{"size":2929,"mtime":1608794535240,"results":"51","hashOfConfig":"37"},{"size":1197,"mtime":1608773922930,"results":"52","hashOfConfig":"37"},{"size":570,"mtime":1608683859040,"results":"53","hashOfConfig":"37"},{"size":9871,"mtime":1608808315530,"results":"54","hashOfConfig":"37"},{"size":914,"mtime":1608723593710,"results":"55","hashOfConfig":"37"},{"size":913,"mtime":1608796256480,"results":"56","hashOfConfig":"37"},{"size":4189,"mtime":1608808552000,"results":"57","hashOfConfig":"37"},{"size":5224,"mtime":1608808552770,"results":"58","hashOfConfig":"37"},{"size":12440,"mtime":1608869440330,"results":"59","hashOfConfig":"37"},{"size":12719,"mtime":1608808553820,"results":"60","hashOfConfig":"37"},{"size":3940,"mtime":1608808554550,"results":"61","hashOfConfig":"37"},{"size":2588,"mtime":1608807304296,"results":"62","hashOfConfig":"37"},{"size":3007,"mtime":1608808510800,"results":"63","hashOfConfig":"37"},{"size":1186,"mtime":1608808312077,"results":"64","hashOfConfig":"37"},{"size":2069,"mtime":1608808297927,"results":"65","hashOfConfig":"37"},{"size":346,"mtime":1608808547467,"results":"66","hashOfConfig":"37"},{"size":591,"mtime":1608808437185,"results":"67","hashOfConfig":"37"},{"size":7754,"mtime":1608808065931,"results":"68","hashOfConfig":"37"},{"size":2601,"mtime":1608808087534,"results":"69","hashOfConfig":"37"},{"size":1691,"mtime":1608808512130,"results":"70","hashOfConfig":"37"},{"size":7573,"mtime":1608883462840,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"wm2czq",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jonganebski/github/polartypes-frontend/src/index.tsx",[],["145","146"],"/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/App.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/router/router.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/apollo.ts",[],"/home/jonganebski/github/polartypes-frontend/src/constants.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button-add-step.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/helpers.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signin.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signup.tsx",["147","148"],"import { gql, useMutation } from '@apollo/client';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { authTokenVar, isLoggedInVar } from '../../apollo';\nimport {\n  AZ_NUM_PATTERN,\n  EMAIL_PATTERN,\n  PW_MIN_LENGTH,\n  TOKEN,\n} from '../../constants';\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from '../../__generated__/createAccountMutation';\nimport { Button } from '../Button';\nimport { FormError } from '../Form-error';\nimport { ModalCloseIcon } from './partials/CloseIcon';\nimport { ModalBackground } from './partials/Background';\n\nconst CREATE_ACCOUNT_MUTAION = gql`\n  mutation createAccountMutation($input: CreateAccountInput!) {\n    createAccount(input: $input) {\n      ok\n      error\n      token\n      username\n    }\n  }\n`;\n\ninterface ISignupModalProps {\n  setIsSignup: React.Dispatch<React.SetStateAction<boolean | null>>;\n}\n\ninterface IFormProps {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\nexport const SignupModal: React.FC<ISignupModalProps> = ({ setIsSignup }) => {\n  const history = useHistory();\n  const {\n    register,\n    getValues,\n    formState,\n    handleSubmit,\n    errors,\n  } = useForm<IFormProps>({ mode: 'onChange' });\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok, error, token, username },\n    } = data;\n    if (ok && token && username && !error) {\n      localStorage.setItem(TOKEN, token);\n      authTokenVar(token);\n      isLoggedInVar(true);\n      history.push(`/${username}`);\n    }\n  };\n  const [\n    createAccountMutation,\n    { loading, data: mutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAION,\n    { onCompleted },\n  );\n  const onSubmit = () => {\n    createAccountMutation({ variables: { input: { ...getValues() } } });\n  };\n  return (\n    <>\n      <ModalBackground onClick={() => setIsSignup(null)} />\n      <div className=\"modal\">\n        <ModalCloseIcon onClick={() => setIsSignup(null)} />\n        <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n          New account\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-y-5 p-6\">\n          <div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <input\n                ref={register({\n                  required: 'Your first name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First name\"\n                className=\"input w-full\"\n              />\n              <input\n                ref={register({\n                  required: 'Your last name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                className=\"input w-full\"\n              />\n            </div>\n            {(errors.firstName?.message || errors.lastName?.message) && (\n              <div className=\"grid grid-cols-2 gap-2\">\n                <FormError err={errors.firstName?.message} />\n                <FormError err={errors.lastName?.message} />\n              </div>\n            )}\n          </div>\n          <div className=\"grid\">\n            <input\n              ref={register({\n                required: 'Your e-mail address is required.',\n                pattern: EMAIL_PATTERN,\n              })}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"input\"\n            />\n            {errors.email?.message && <FormError err={errors.email.message} />}\n          </div>\n          <div className=\"grid mb-2\">\n            <input\n              ref={register({\n                required: 'You need to enter a password.',\n                minLength: PW_MIN_LENGTH,\n              })}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input\"\n            />\n            {errors.password?.message && (\n              <FormError err={errors.password?.message} />\n            )}\n          </div>\n          {mutationResult?.createAccount.error && (\n            <FormError err={mutationResult.createAccount.error} />\n          )}\n          <Button\n            text=\"Sign up\"\n            type=\"red-solid\"\n            disabled={!formState.isValid}\n            loading={loading}\n          />\n        </form>\n        <div className=\"p-6 text-center bg-myGray-lightest border-t border-t-myGray-light rounded-b-2xl hover:bg-myGray-light\">\n          <span className=\"text-myGray-dark text-sm mr-1\">\n            Already have a Polartypes account?\n          </span>\n          <span\n            onClick={() => {\n              setIsSignup(false);\n            }}\n            className=\"text-myBlue text-sm underline cursor-pointer\"\n          >\n            Log in\n          </span>\n        </div>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-step.tsx",["149","150"],"import { faCalendar, faClock } from '@fortawesome/free-regular-svg-icons';\nimport { faCamera, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { INITIAL_DATE_STATE } from '../../constants';\nimport { formatDate, getTimeZone } from '../../helpers';\nimport { useGeocoder } from '../../hooks/useGeocoder';\nimport { Button } from '../Button';\nimport { ModalCloseIcon } from './partials/CloseIcon';\nimport { Calendar } from '../Tooltips/Calendar';\nimport { Clock } from '../Tooltips/Clock';\nimport { UploadBox } from './partials/UploadBox';\n\ninterface ICreateStepModal {\n  tripStartDate: string;\n  tripEndDate: string | null;\n  belowStepDate: string | null;\n  belowStepTimeZone: string;\n  setIsCreateStepModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport interface ICreateStepFormProps {\n  location: string;\n  name: string;\n  country: string;\n  lat: string;\n  lon: string;\n  story: string;\n  arrivedDate: string;\n  arrivedTime: string;\n  timeZone: string;\n  imageUrls: string[];\n}\n\nexport const CreateStepModal: React.FC<ICreateStepModal> = ({\n  tripStartDate,\n  tripEndDate,\n  belowStepDate,\n  belowStepTimeZone,\n  setIsCreateStepModal,\n}) => {\n  const belowDateObj = belowStepDate ? new Date(belowStepDate) : new Date();\n  const belowLocalDate = moment(belowStepDate).tz(belowStepTimeZone);\n  const [arrivedDate, setArrivedDate] = useState<Date | null>(belowDateObj);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isPopupCalendar, setIsPopupCalendar] = useState<boolean | null>(null);\n  const f = useForm<ICreateStepFormProps>({\n    mode: 'onChange',\n    defaultValues: {\n      arrivedTime: `${belowLocalDate?.hour() ?? '00'}:00`,\n    },\n  });\n  const { geocodeData, setGeocodeData } = useGeocoder(searchTerm);\n  const onLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value);\n  };\n  const onSubmit = () => {\n    console.log(f.getValues());\n  };\n  return (\n    <FormProvider {...f}>\n      <div className=\"absolute z-50 top-0 left-0 w-full h-full bg-myGreen-darkest bg-opacity-80\"></div>\n      <div className=\"absolute z-50 top-0 left-0 w-full h-screenExceptHeader overflow-y-scroll\">\n        <div className=\"absolute top-2 left-1/2 transform -translate-x-1/2 w-11/12 bg-white rounded-2xl\">\n          <ModalCloseIcon onClick={() => setIsCreateStepModal(false)} />\n          <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n            New Trip\n          </div>\n          <form onSubmit={f.handleSubmit(onSubmit)} className=\"p-6\">\n            <section className=\"p-6 mb-4 grid grid-cols-oneToTwo bg-myGray-dark rounded-2xl\">\n              <h3 className=\"text-white font-semibold\">Location</h3>\n              <div className=\"rounded-sm\">\n                <div className=\"relative\">\n                  <input\n                    onChange={onLocationChange}\n                    ref={f.register({ required: true })}\n                    name=\"location\"\n                    placeholder=\"Enter a location\"\n                    autoComplete=\"off\"\n                    className=\"input w-full border-transparent rounded-b-none\"\n                  />\n                  <div className=\"absolute z-10 w-full flex flex-col bg-white\">\n                    {geocodeData?.map((d: any, i: number) => {\n                      return (\n                        <div\n                          key={i}\n                          onClick={async () => {\n                            const lat = (+d.point?.lat)?.toFixed(6);\n                            const lon = (+d.point?.lng)?.toFixed(6);\n                            f.setValue('location', d.name, {\n                              shouldValidate: true,\n                            });\n                            f.setValue('lat', lat, { shouldValidate: true });\n                            f.setValue('lon', lon, { shouldValidate: true });\n                            f.setValue('country', d.country, {\n                              shouldValidate: true,\n                            });\n                            setGeocodeData(null);\n                          }}\n                          className=\"px-4 py-2 cursor-pointer text-sm hover:bg-myGray-lightest\"\n                        >\n                          <span className=\"mr-2\">{d.name}</span>\n                          <span className=\"text-myGray\">{d.country}</span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"p-2 pl-4 flex bg-white text-myGray-darkest text-sm\">\n                  <div className=\"flex items-center border-r border-myGray-light\">\n                    <span className=\"font-semibold\">Lat:</span>\n                    <input\n                      ref={f.register({ required: true })}\n                      name=\"lat\"\n                      placeholder=\"00,000000\"\n                      className=\"ml-1 w-full focus:outline-none\"\n                    />\n                  </div>\n                  <div className=\"pl-4 flex items-center\">\n                    <span className=\"font-semibold\">Lon:</span>\n                    <input\n                      ref={f.register({ required: true })}\n                      name=\"lon\"\n                      placeholder=\"00,000000\"\n                      className=\"ml-1 w-full focus:outline-none\"\n                    />\n                  </div>\n                  <div\n                    onClick={async () => {\n                      const { lat, lon } = f.getValues();\n                      const { ok, error, timeZone } = await getTimeZone(\n                        lat,\n                        lon,\n                      );\n                      if (ok && !error && timeZone) {\n                        console.log(timeZone);\n                        f.setValue('timeZone', timeZone);\n                      }\n                    }}\n                    className=\"py-1.5 px-4 rounded-full bg-myBlue text-white cursor-pointer\"\n                  >\n                    Set\n                  </div>\n                </div>\n              </div>\n            </section>\n            <section className=\"p-6 mb-6 grid grid-cols-oneToTwo gap-y-4 rounded-2xl shadow-surround\">\n              <h3 className=\"text-myGreen-darkest font-semibold\">Step name</h3>\n              <div className=\"flex\">\n                <input\n                  ref={f.register({ required: true })}\n                  name=\"name\"\n                  placeholder=\"-\"\n                  className=\"input w-full rounded-r-none\"\n                />\n                <input\n                  ref={f.register({ required: true })}\n                  name=\"country\"\n                  readOnly\n                  style={{\n                    width: f.watch('country')?.length + 2 + 'ch',\n                  }}\n                  className=\"px-2 py-3 w-0 text-myGray-dark border border-l-0 border-myGray bg-myGray-light rounded-r-md rounded-l-none focus:outline-none\"\n                />\n              </div>\n              <h3 className=\"text-myGreen-darkest font-semibold\">\n                Arrival Date & Time\n              </h3>\n              <div className=\"flex\">\n                <div className=\"relative mr-4 w-full min-w-min\">\n                  <input\n                    ref={f.register({\n                      required: true,\n                      setValueAs: () => {\n                        if (!arrivedDate) {\n                          f.setError('arrivedDate', {\n                            message: 'Arrival date is not provided.',\n                          });\n                          return;\n                        }\n                        const year = arrivedDate.getFullYear();\n                        const month = (arrivedDate.getMonth() + 1)\n                          .toString()\n                          .padStart(2, '0');\n                        const date = arrivedDate\n                          .getDate()\n                          .toString()\n                          .padStart(2, '0');\n                        const ISO8601_UTC = moment\n                          .utc(`${year}-${month}-${date}`)\n                          .format();\n                        if (ISO8601_UTC !== 'Invalid date') {\n                          return ISO8601_UTC;\n                        }\n                        return null;\n                      },\n                    })}\n                    name=\"arrivedDate\"\n                    onClick={() =>\n                      setIsPopupCalendar((prev) => (prev ? null : true))\n                    }\n                    value={formatDate(arrivedDate, 'short')}\n                    readOnly\n                    className={`px-4 py-3 w-full border border-solid rounded-sm cursor-pointer focus:outline-none ${\n                      isPopupCalendar ? 'border-myBlue' : 'border-myGray'\n                    }`}\n                  />\n                  <FontAwesomeIcon\n                    icon={faCalendar}\n                    className=\"absolute top-1/2 transform -translate-y-1/2 right-3 text-myBlue text-xl\"\n                  />\n                  {isPopupCalendar && (\n                    <Calendar\n                      selectedDate={arrivedDate}\n                      initialDateState={INITIAL_DATE_STATE}\n                      setSelectedDate={setArrivedDate}\n                      effectiveSince={\n                        new Date(\n                          new Date(tripStartDate).getFullYear(),\n                          new Date(tripStartDate).getMonth(),\n                          new Date(tripStartDate).getDate() - 1,\n                        )\n                      }\n                      effectiveUntil={\n                        tripEndDate ? new Date(tripEndDate) : null\n                      }\n                    />\n                  )}\n                </div>\n                <div className=\"relative min-w-min\">\n                  <input\n                    ref={f.register({ required: true })}\n                    name=\"arrivedTime\"\n                    onClick={() =>\n                      setIsPopupCalendar((prev) =>\n                        prev === false ? null : false,\n                      )\n                    }\n                    readOnly\n                    className={`pl-4 py-3 w-full border border-solid rounded-sm cursor-pointer focus:outline-none ${\n                      isPopupCalendar === false\n                        ? 'border-myBlue'\n                        : 'border-myGray'\n                    }`}\n                  />\n                  <FontAwesomeIcon\n                    icon={faClock}\n                    className=\"absolute top-1/2 transform -translate-y-1/2 right-3 text-myBlue text-xl\"\n                  />\n                  {isPopupCalendar === false && (\n                    <Clock timeZone={f.watch('timeZone')} />\n                  )}\n                  <input\n                    ref={f.register()}\n                    name=\"timeZone\"\n                    readOnly\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n              <h3 className=\"text-myGreen-darkest font-semibold\">Your story</h3>\n              <textarea\n                ref={f.register()}\n                name=\"story\"\n                placeholder=\"What have you been up to?\"\n                className=\"resize-none px-4 py-3 h-48 border border-myGray rounded-sm focus:outline-none focus:border-myBlue\"\n              />\n              <h3 className=\"text-myGreen-darkest font-semibold\">\n                Add your photos\n              </h3>\n              <UploadBox\n                isUploading={isUploading}\n                setIsUploading={setIsUploading}\n              />\n            </section>\n            <div>\n              <Button\n                text=\"Add step\"\n                type=\"red-solid\"\n                disabled={!f.formState.isValid || isUploading}\n                className=\"mr-4\"\n              />\n              <Button\n                text=\"Cancel\"\n                type=\"white-solid\"\n                onClick={() => setIsCreateStepModal(false)}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </FormProvider>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Set-time-zone.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/Trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/Step.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Headers/HomeHeader.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Headers/CommonHeader.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Background.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/CloseIcon.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Calendar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Clock.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comments.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/UploadBox.tsx",["151"],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":23},{"ruleId":"156","severity":1,"message":"160","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":25},{"ruleId":"156","severity":1,"message":"161","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":2,"column":20,"nodeType":"158","messageId":"159","endLine":2,"endColumn":33},{"ruleId":"156","severity":1,"message":"162","line":8,"column":10,"nodeType":"158","messageId":"159","endLine":8,"endColumn":17},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"@typescript-eslint/no-unused-vars","'faTimesCircle' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'faCamera' is defined but never used.","'Spinner' is defined but never used.","no-global-assign","no-unsafe-negation"]