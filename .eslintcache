[{"/home/jonganebski/github/polartypes-frontend/src/index.tsx":"1","/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts":"2","/home/jonganebski/github/polartypes-frontend/src/components/App.tsx":"3","/home/jonganebski/github/polartypes-frontend/src/router/router.tsx":"4","/home/jonganebski/github/polartypes-frontend/src/components/Header-home.tsx":"5","/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx":"6","/home/jonganebski/github/polartypes-frontend/src/components/Modal-signin.tsx":"7","/home/jonganebski/github/polartypes-frontend/src/components/Modal-signup.tsx":"8","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx":"9","/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx":"10","/home/jonganebski/github/polartypes-frontend/src/apollo.ts":"11","/home/jonganebski/github/polartypes-frontend/src/constants.ts":"12","/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx":"13","/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx":"14","/home/jonganebski/github/polartypes-frontend/src/components/Header-common.tsx":"15","/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx":"16","/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx":"17","/home/jonganebski/github/polartypes-frontend/src/components/Card-trip.tsx":"18","/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx":"19","/home/jonganebski/github/polartypes-frontend/src/components/Modal-create-trip.tsx":"20","/home/jonganebski/github/polartypes-frontend/src/components/Icon-close-modal.tsx":"21","/home/jonganebski/github/polartypes-frontend/src/components/Calendar.tsx":"22","/home/jonganebski/github/polartypes-frontend/src/components/Modal-background.tsx":"23","/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts":"24","/home/jonganebski/github/polartypes-frontend/src/components/Modal-set-time-zone.tsx":"25","/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts":"26","/home/jonganebski/github/polartypes-frontend/src/hooks/useTimeZone.ts":"27","/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx":"28"},{"size":665,"mtime":1608534735950,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1608450751420,"results":"31","hashOfConfig":"30"},{"size":132,"mtime":1608510247700,"results":"32","hashOfConfig":"30"},{"size":623,"mtime":1608602117560,"results":"33","hashOfConfig":"30"},{"size":1184,"mtime":1608555270570,"results":"34","hashOfConfig":"30"},{"size":2547,"mtime":1608554038050,"results":"35","hashOfConfig":"30"},{"size":4173,"mtime":1608631947350,"results":"36","hashOfConfig":"30"},{"size":5208,"mtime":1608631961340,"results":"37","hashOfConfig":"30"},{"size":195,"mtime":1608536237160,"results":"38","hashOfConfig":"30"},{"size":1288,"mtime":1608625558530,"results":"39","hashOfConfig":"30"},{"size":1059,"mtime":1608601354720,"results":"40","hashOfConfig":"30"},{"size":555,"mtime":1608624638340,"results":"41","hashOfConfig":"30"},{"size":366,"mtime":1608547682810,"results":"42","hashOfConfig":"30"},{"size":4886,"mtime":1608685684190,"results":"43","hashOfConfig":"30"},{"size":2048,"mtime":1608602101420,"results":"44","hashOfConfig":"30"},{"size":904,"mtime":1608590422580,"results":"45","hashOfConfig":"30"},{"size":304,"mtime":1608557526610,"results":"46","hashOfConfig":"30"},{"size":1774,"mtime":1608597531350,"results":"47","hashOfConfig":"30"},{"size":319,"mtime":1608685149390,"results":"48","hashOfConfig":"30"},{"size":10117,"mtime":1608637778020,"results":"49","hashOfConfig":"30"},{"size":591,"mtime":1608603171230,"results":"50","hashOfConfig":"30"},{"size":7263,"mtime":1608629101280,"results":"51","hashOfConfig":"30"},{"size":346,"mtime":1608630270340,"results":"52","hashOfConfig":"30"},{"size":2860,"mtime":1608683289870,"results":"53","hashOfConfig":"30"},{"size":3974,"mtime":1608685534630,"results":"54","hashOfConfig":"30"},{"size":941,"mtime":1608642094270,"results":"55","hashOfConfig":"30"},{"size":763,"mtime":1608648129900,"results":"56","hashOfConfig":"30"},{"size":570,"mtime":1608683859040,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"wm2czq",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jonganebski/github/polartypes-frontend/src/index.tsx",[],["119","120"],"/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/App.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/router/router.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Header-home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-signin.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-signup.tsx",["121","122"],"import { gql, useMutation } from '@apollo/client';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { authTokenVar, isLoggedInVar } from '../apollo';\nimport {\n  AZ_NUM_PATTERN,\n  EMAIL_PATTERN,\n  PW_MIN_LENGTH,\n  TOKEN,\n} from '../constants';\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from '../__generated__/createAccountMutation';\nimport { Button } from './Button';\nimport { FormError } from './Form-error';\nimport { ModalCloseIcon } from './Icon-close-modal';\nimport { ModalBackground } from './Modal-background';\n\nconst CREATE_ACCOUNT_MUTAION = gql`\n  mutation createAccountMutation($input: CreateAccountInput!) {\n    createAccount(input: $input) {\n      ok\n      error\n      token\n      username\n    }\n  }\n`;\n\ninterface ISignupModalProps {\n  setIsSignup: React.Dispatch<React.SetStateAction<boolean | null>>;\n}\n\ninterface IFormProps {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\nexport const SignupModal: React.FC<ISignupModalProps> = ({ setIsSignup }) => {\n  const history = useHistory();\n  const {\n    register,\n    getValues,\n    formState,\n    handleSubmit,\n    errors,\n  } = useForm<IFormProps>({ mode: 'onChange' });\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok, error, token, username },\n    } = data;\n    if (ok && token && username && !error) {\n      localStorage.setItem(TOKEN, token);\n      authTokenVar(token);\n      isLoggedInVar(true);\n      history.push(`/${username}`);\n    }\n  };\n  const [\n    createAccountMutation,\n    { loading, data: mutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAION,\n    { onCompleted },\n  );\n  const onSubmit = () => {\n    createAccountMutation({ variables: { input: { ...getValues() } } });\n  };\n  return (\n    <>\n      <ModalBackground onClick={() => setIsSignup(null)} />\n      <div className=\"modal\">\n        <ModalCloseIcon onClick={() => setIsSignup(null)} />\n        <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n          New account\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-y-5 p-6\">\n          <div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <input\n                ref={register({\n                  required: 'Your first name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First name\"\n                className=\"input w-full\"\n              />\n              <input\n                ref={register({\n                  required: 'Your last name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                className=\"input w-full\"\n              />\n            </div>\n            {(errors.firstName?.message || errors.lastName?.message) && (\n              <div className=\"grid grid-cols-2 gap-2\">\n                <FormError err={errors.firstName?.message} />\n                <FormError err={errors.lastName?.message} />\n              </div>\n            )}\n          </div>\n          <div className=\"grid\">\n            <input\n              ref={register({\n                required: 'Your e-mail address is required.',\n                pattern: EMAIL_PATTERN,\n              })}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"input\"\n            />\n            {errors.email?.message && <FormError err={errors.email.message} />}\n          </div>\n          <div className=\"grid mb-2\">\n            <input\n              ref={register({\n                required: 'You need to enter a password.',\n                minLength: PW_MIN_LENGTH,\n              })}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input\"\n            />\n            {errors.password?.message && (\n              <FormError err={errors.password?.message} />\n            )}\n          </div>\n          {mutationResult?.createAccount.error && (\n            <FormError err={mutationResult.createAccount.error} />\n          )}\n          <Button\n            text=\"Sign up\"\n            type=\"red-solid\"\n            disabled={!formState.isValid}\n            loading={loading}\n          />\n        </form>\n        <div className=\"p-6 text-center bg-myGray-lightest border-t border-t-myGray-light rounded-b-2xl hover:bg-myGray-light\">\n          <span className=\"text-myGray-dark text-sm mr-1\">\n            Already have a Polartypes account?\n          </span>\n          <span\n            onClick={() => {\n              setIsSignup(false);\n            }}\n            className=\"text-myBlue text-sm underline cursor-pointer\"\n          >\n            Log in\n          </span>\n        </div>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/apollo.ts",["123"],"import {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  makeVar,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { TOKEN } from './constants';\nimport { useWhoAmI } from './hooks/useWhoAmI';\n\nconst token = localStorage.getItem(TOKEN);\n\nexport const isLoggedInVar = makeVar(Boolean(token));\n\nexport const authTokenVar = makeVar(token);\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n});\n\nconst authLink = setContext((x, y) => {\n  console.log('x: ', x);\n  console.log('y: ', y);\n  return {\n    headers: {\n      ...y.headers,\n      'x-jwt': authTokenVar() ?? '',\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          isLoggedIn: {\n            read() {\n              return isLoggedInVar;\n            },\n          },\n          token: {\n            read() {\n              return authTokenVar;\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","/home/jonganebski/github/polartypes-frontend/src/constants.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Header-common.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Card-trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-create-trip.tsx",["124","125","126","127","128","129"],"import { gql, useMutation } from '@apollo/client';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faLock,\n  faUserFriends,\n  faGlobe,\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\nimport React, { useEffect, useState } from 'react';\nimport {\n  createTripMutation,\n  createTripMutationVariables,\n} from '../__generated__/createTripMutation';\nimport { Button } from './Button';\nimport { FormError } from './Form-error';\nimport { ModalCloseIcon } from './Icon-close-modal';\nimport { Calendar } from './Calendar';\nimport { ModalBackground } from './Modal-background';\nimport { useForm } from 'react-hook-form';\nimport { Availability } from '../__generated__/globalTypes';\n\nconst CREATE_TRIP_MUTATION = gql`\n  mutation createTripMutation($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      ok\n      error\n    }\n  }\n`;\nconst dateObj = new Date();\nconst INITIAL_DATE_STATE = new Date(\n  dateObj.getFullYear(),\n  dateObj.getMonth(),\n  dateObj.getDate(),\n);\n\ninterface ICreateTripModal {\n  setIsCreateTrip: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface IFormProps {\n  name: string;\n  summary: string;\n  startDate: Date;\n  endDate: Date;\n  availability: Availability;\n}\n\nexport const CreateTripModal: React.FC<ICreateTripModal> = ({\n  setIsCreateTrip,\n}) => {\n  const [startDate, setStartDate] = useState<Date | null>(INITIAL_DATE_STATE);\n  const [endDate, setEndDate] = useState<Date | null>(null);\n  const [isStartDateCalendar, setIsStartDateCalendar] = useState<\n    boolean | null\n  >(null);\n  useEffect(() => {\n    if (startDate && endDate && endDate.getTime() < startDate.getTime()) {\n      setEndDate(startDate);\n    }\n  }, [endDate, startDate]);\n  const {\n    register,\n    getValues,\n    formState,\n    handleSubmit,\n    errors,\n  } = useForm<IFormProps>({\n    mode: 'onChange',\n  });\n  const onCompleted = (data: createTripMutation) => {\n    const {\n      createTrip: { ok, error },\n    } = data;\n    console.log(ok, error);\n  };\n  const [createTripMutation, { loading }] = useMutation<\n    createTripMutation,\n    createTripMutationVariables\n  >(CREATE_TRIP_MUTATION, { onCompleted });\n  const onSubmit = () => {\n    const { name, summary, startDate, endDate, availability } = getValues();\n    console.log(getValues());\n    // createTripMutation({\n    //   variables: { input: { name, summary, startDate, endDate, availability } },\n    // });\n  };\n  return (\n    <>\n      <ModalBackground onClick={() => setIsCreateTrip(false)} />\n      <div className=\"modal overflow-hidden\">\n        <ModalCloseIcon onClick={() => setIsCreateTrip(false)} />\n        <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n          New Trip\n        </div>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"relative grid gap-y-5 max-h-screen80 overflow-y-scroll\"\n        >\n          <div className=\"p-6 text-xl text-myGreen-darkest font-semibold border-b bg-myGray-lightest\">\n            Trip details\n          </div>\n          <div className=\"grid gap-y-1 px-6\">\n            <h6 className=\"font-semibold text-myGreen-darkest\">Trip name</h6>\n            <input\n              ref={register({ required: 'Please enter a name for the trip' })}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"e.g. South American Trip\"\n              className=\"input\"\n            />\n            {errors.name?.message && <FormError err={errors.name.message} />}\n          </div>\n          <div className=\"grid gap-y-1 px-6\">\n            <h6 className=\"font-semibold text-myGreen-darkest\">Trip summary</h6>\n            <textarea\n              ref={register({ maxLength: 80 })}\n              name=\"summary\"\n              maxLength={80}\n              placeholder=\"e.g. An awesome roadtrip through the deserts of Africa with my best friends\"\n              className=\"input resize-none h-32\"\n            />\n          </div>\n          <div>\n            <div className=\"p-6 text-xl text-myGreen-darkest font-semibold border-t border-b bg-myGray-lightest\">\n              When?\n            </div>\n          </div>\n          <div className=\"grid gap-y-1 px-6\">\n            <h6 className=\"font-semibold text-myGreen-darkest\">Start date</h6>\n            <div className=\"relative\">\n              <input\n                ref={register({\n                  required: true,\n                  setValueAs: (value) => {\n                    const y = new Date(value);\n                    const x = Date.UTC(\n                      y.getUTCFullYear(),\n                      y.getUTCMonth(),\n                      y.getUTCDate(),\n                    );\n                    console.log(new Date(x));\n                  },\n                })}\n                name=\"startDate\"\n                readOnly\n                value={startDate?.toLocaleDateString('en-GB', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n                onClick={() =>\n                  setIsStartDateCalendar((prev) => (prev ? null : true))\n                }\n                type=\"text\"\n                className=\"input w-full bg-white cursor-pointer\"\n              />\n              <FontAwesomeIcon\n                icon={faCalendarAlt}\n                className=\"absolute top-1/2 right-5 transform -translate-y-1/2 text-myBlue text-lg\"\n              />\n              {isStartDateCalendar && (\n                <Calendar\n                  selectedDate={startDate}\n                  setSelectedDate={setStartDate}\n                  initialDateState={INITIAL_DATE_STATE}\n                />\n              )}\n            </div>\n          </div>\n          <div className=\"grid gap-y-1 px-6\">\n            <h6 className=\"font-semibold text-myGreen-darkest\">End date</h6>\n            <div className=\"relative\">\n              <input\n                ref={register({ valueAsDate: true })}\n                name=\"endDate\"\n                readOnly\n                value={\n                  endDate\n                    ? endDate.toLocaleDateString('en-GB', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                      })\n                    : \"I don't know\"\n                }\n                onClick={() =>\n                  setIsStartDateCalendar((prev) =>\n                    prev === false ? null : false,\n                  )\n                }\n                type=\"text\"\n                className=\"input w-full bg-white cursor-pointer\"\n              />\n              <FontAwesomeIcon\n                icon={faCalendarAlt}\n                className=\"absolute top-1/2 right-5 transform -translate-y-1/2 text-myBlue text-lg\"\n              />\n              {isStartDateCalendar === false && (\n                <Calendar\n                  selectedDate={endDate}\n                  setSelectedDate={setEndDate}\n                  initialDateState={INITIAL_DATE_STATE}\n                  effectiveSince={startDate}\n                  nullable={true}\n                />\n              )}\n            </div>\n          </div>\n          <div className=\"px-6\">\n            <FormError err='This trip overlaps with \"future trip\". Select a different date.' />\n          </div>\n          <div className=\"p-6 text-xl text-myGreen-darkest font-semibold border-t border-b bg-myGray-lightest\">\n            Who can see my trip?\n          </div>\n          <div className=\"grid\">\n            <label className=\"px-6 pb-6 flex items-center border-b border-myGray-light cursor-pointer\">\n              <input\n                ref={register({ required: true })}\n                name=\"availability\"\n                value={Availability.Private}\n                type=\"radio\"\n                className=\"mr-6 w-6 h-6\"\n              />\n              <div>\n                <h6 className=\"mb-1 font-medium text-myGreen-darkest\">\n                  <FontAwesomeIcon icon={faLock} /> Only me\n                </h6>\n                <p className=\"text-myGray-dark text-xs\">\n                  This trip, including all details like your current location,\n                  is only visible to you.\n                </p>\n              </div>\n            </label>\n            <label className=\"p-6 flex items-center cursor-pointer\">\n              <input\n                ref={register({ required: true })}\n                name=\"availability\"\n                value={Availability.Followers}\n                type=\"radio\"\n                className=\"mr-6 w-6 h-6\"\n              />\n              <div>\n                <h6 className=\"mb-1 font-medium text-myGreen-darkest\">\n                  <FontAwesomeIcon icon={faUserFriends} /> My followers\n                </h6>\n                <p className=\"text-myGray-dark text-xs\">\n                  This trip, including all details like your current location,\n                  is only visible to you.\n                </p>\n              </div>\n            </label>\n            <label className=\"p-6 flex items-center border-t border-myGray-light cursor-pointer\">\n              <input\n                ref={register({ required: true })}\n                name=\"availability\"\n                value={Availability.Public}\n                type=\"radio\"\n                className=\"mr-6 w-6 h-6\"\n              />\n              <div>\n                <h6 className=\"mb-1 font-medium text-myGreen-darkest\">\n                  <FontAwesomeIcon icon={faGlobe} /> Public\n                </h6>\n                <p className=\"text-myGray-dark text-xs\">\n                  This trip, including all details like your current location,\n                  is only visible to you.\n                </p>\n              </div>\n            </label>\n          </div>\n          <div className=\"p-6 grid bg-myGray-lightest border-t border-myGray-light rounded-bl-2xl\">\n            <Button\n              text=\"Sign in\"\n              disabled={!formState.isValid}\n              loading={loading}\n              type=\"red-solid\"\n            />\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Icon-close-modal.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Calendar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-background.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-set-time-zone.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useTimeZone.ts",[],["130","131"],"/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":23},{"ruleId":"136","severity":1,"message":"140","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":25},{"ruleId":"136","severity":1,"message":"141","line":9,"column":10,"nodeType":"138","messageId":"139","endLine":9,"endColumn":19},{"ruleId":"136","severity":1,"message":"142","line":77,"column":10,"nodeType":"138","messageId":"139","endLine":77,"endColumn":28},{"ruleId":"136","severity":1,"message":"143","line":82,"column":13,"nodeType":"138","messageId":"139","endLine":82,"endColumn":17},{"ruleId":"136","severity":1,"message":"144","line":82,"column":19,"nodeType":"138","messageId":"139","endLine":82,"endColumn":26},{"ruleId":"136","severity":1,"message":"145","line":82,"column":28,"nodeType":"138","messageId":"139","endLine":82,"endColumn":37},{"ruleId":"136","severity":1,"message":"146","line":82,"column":39,"nodeType":"138","messageId":"139","endLine":82,"endColumn":46},{"ruleId":"136","severity":1,"message":"147","line":82,"column":48,"nodeType":"138","messageId":"139","endLine":82,"endColumn":60},{"ruleId":"132","replacedBy":"148"},{"ruleId":"134","replacedBy":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'faTimesCircle' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'useWhoAmI' is defined but never used.","'createTripMutation' is assigned a value but never used.","'name' is assigned a value but never used.","'summary' is assigned a value but never used.","'startDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'availability' is assigned a value but never used.",["150"],["151"],"no-global-assign","no-unsafe-negation"]