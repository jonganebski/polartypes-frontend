[{"/home/jonganebski/github/polartypes-frontend/src/index.tsx":"1","/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts":"2","/home/jonganebski/github/polartypes-frontend/src/components/App.tsx":"3","/home/jonganebski/github/polartypes-frontend/src/router/router.tsx":"4","/home/jonganebski/github/polartypes-frontend/src/components/Header-home.tsx":"5","/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx":"6","/home/jonganebski/github/polartypes-frontend/src/components/Modal-signin.tsx":"7","/home/jonganebski/github/polartypes-frontend/src/components/Modal-signup.tsx":"8","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx":"9","/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx":"10","/home/jonganebski/github/polartypes-frontend/src/apollo.ts":"11","/home/jonganebski/github/polartypes-frontend/src/constants.ts":"12","/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx":"13","/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx":"14","/home/jonganebski/github/polartypes-frontend/src/components/Header-common.tsx":"15","/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx":"16","/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx":"17","/home/jonganebski/github/polartypes-frontend/src/components/Card-trip.tsx":"18","/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx":"19","/home/jonganebski/github/polartypes-frontend/src/components/Modal-create-trip.tsx":"20","/home/jonganebski/github/polartypes-frontend/src/components/Icon-close-modal.tsx":"21","/home/jonganebski/github/polartypes-frontend/src/components/Calendar.tsx":"22"},{"size":665,"mtime":1608534735950,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1608450751420,"results":"25","hashOfConfig":"24"},{"size":132,"mtime":1608510247700,"results":"26","hashOfConfig":"24"},{"size":623,"mtime":1608602117560,"results":"27","hashOfConfig":"24"},{"size":1184,"mtime":1608555270570,"results":"28","hashOfConfig":"24"},{"size":2547,"mtime":1608554038050,"results":"29","hashOfConfig":"24"},{"size":4309,"mtime":1608603243060,"results":"30","hashOfConfig":"24"},{"size":5344,"mtime":1608603282780,"results":"31","hashOfConfig":"24"},{"size":195,"mtime":1608536237160,"results":"32","hashOfConfig":"24"},{"size":1288,"mtime":1608625558530,"results":"33","hashOfConfig":"24"},{"size":1059,"mtime":1608601354720,"results":"34","hashOfConfig":"24"},{"size":555,"mtime":1608624638340,"results":"35","hashOfConfig":"24"},{"size":366,"mtime":1608547682810,"results":"36","hashOfConfig":"24"},{"size":4505,"mtime":1608622829340,"results":"37","hashOfConfig":"24"},{"size":2048,"mtime":1608602101420,"results":"38","hashOfConfig":"24"},{"size":904,"mtime":1608590422580,"results":"39","hashOfConfig":"24"},{"size":304,"mtime":1608557526610,"results":"40","hashOfConfig":"24"},{"size":1774,"mtime":1608597531350,"results":"41","hashOfConfig":"24"},{"size":297,"mtime":1608602116050,"results":"42","hashOfConfig":"24"},{"size":8367,"mtime":1608626945510,"results":"43","hashOfConfig":"24"},{"size":591,"mtime":1608603171230,"results":"44","hashOfConfig":"24"},{"size":7263,"mtime":1608629101280,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"wm2czq",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jonganebski/github/polartypes-frontend/src/index.tsx",[],["94","95"],"/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/App.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/router/router.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Header-home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-signin.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-signup.tsx",["96","97"],"import { gql, useMutation } from '@apollo/client';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { authTokenVar, isLoggedInVar } from '../apollo';\nimport {\n  AZ_NUM_PATTERN,\n  EMAIL_PATTERN,\n  PW_MIN_LENGTH,\n  TOKEN,\n} from '../constants';\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from '../__generated__/createAccountMutation';\nimport { Button } from './Button';\nimport { FormError } from './Form-error';\nimport { ModalCloseIcon } from './Icon-close-modal';\n\nconst CREATE_ACCOUNT_MUTAION = gql`\n  mutation createAccountMutation($input: CreateAccountInput!) {\n    createAccount(input: $input) {\n      ok\n      error\n      token\n      username\n    }\n  }\n`;\n\ninterface ISignupModalProps {\n  setIsSignup: React.Dispatch<React.SetStateAction<boolean | null>>;\n}\n\ninterface IFormProps {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\nexport const SignupModal: React.FC<ISignupModalProps> = ({ setIsSignup }) => {\n  const history = useHistory();\n  const {\n    register,\n    getValues,\n    formState,\n    handleSubmit,\n    errors,\n  } = useForm<IFormProps>({ mode: 'onChange' });\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok, error, token, username },\n    } = data;\n    if (ok && token && username && !error) {\n      localStorage.setItem(TOKEN, token);\n      authTokenVar(token);\n      isLoggedInVar(true);\n      history.push(`/${username}`);\n    }\n  };\n  const [\n    createAccountMutation,\n    { loading, data: mutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAION,\n    { onCompleted },\n  );\n  const onSubmit = () => {\n    createAccountMutation({ variables: { input: { ...getValues() } } });\n  };\n  return (\n    <>\n      <div\n        onClick={() => setIsSignup(null)}\n        className=\"fixed z-50 top-0 w-screen h-screen bg-myGreen-darkest opacity-80\"\n      />\n      <div className=\"fixed z-50 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full max-w-sm bg-white rounded-2xl\">\n        <ModalCloseIcon onClick={() => setIsSignup(null)} />\n        <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n          New account\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-y-5 p-6\">\n          <div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <input\n                ref={register({\n                  required: 'Your first name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First name\"\n                className=\"input w-full\"\n              />\n              <input\n                ref={register({\n                  required: 'Your last name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                className=\"input w-full\"\n              />\n            </div>\n            {(errors.firstName?.message || errors.lastName?.message) && (\n              <div className=\"grid grid-cols-2 gap-2\">\n                <FormError err={errors.firstName?.message} />\n                <FormError err={errors.lastName?.message} />\n              </div>\n            )}\n          </div>\n          <div className=\"grid\">\n            <input\n              ref={register({\n                required: 'Your e-mail address is required.',\n                pattern: EMAIL_PATTERN,\n              })}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"input\"\n            />\n            {errors.email?.message && <FormError err={errors.email.message} />}\n          </div>\n          <div className=\"grid mb-2\">\n            <input\n              ref={register({\n                required: 'You need to enter a password.',\n                minLength: PW_MIN_LENGTH,\n              })}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input\"\n            />\n            {errors.password?.message && (\n              <FormError err={errors.password?.message} />\n            )}\n          </div>\n          {mutationResult?.createAccount.error && (\n            <FormError err={mutationResult.createAccount.error} />\n          )}\n          <Button\n            text=\"Sign up\"\n            type=\"red-solid\"\n            disabled={!formState.isValid}\n            loading={loading}\n          />\n        </form>\n        <div className=\"p-6 text-center bg-myGray-lightest border-t border-t-myGray-light rounded-b-2xl hover:bg-myGray-light\">\n          <span className=\"text-myGray-dark text-sm mr-1\">\n            Already have a Polartypes account?\n          </span>\n          <span\n            onClick={() => {\n              setIsSignup(false);\n            }}\n            className=\"text-myBlue text-sm underline cursor-pointer\"\n          >\n            Log in\n          </span>\n        </div>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/apollo.ts",["98"],"import {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  makeVar,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { TOKEN } from './constants';\nimport { useWhoAmI } from './hooks/useWhoAmI';\n\nconst token = localStorage.getItem(TOKEN);\n\nexport const isLoggedInVar = makeVar(Boolean(token));\n\nexport const authTokenVar = makeVar(token);\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n});\n\nconst authLink = setContext((x, y) => {\n  console.log('x: ', x);\n  console.log('y: ', y);\n  return {\n    headers: {\n      ...y.headers,\n      'x-jwt': authTokenVar() ?? '',\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          isLoggedIn: {\n            read() {\n              return isLoggedInVar;\n            },\n          },\n          token: {\n            read() {\n              return authTokenVar;\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","/home/jonganebski/github/polartypes-frontend/src/constants.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx",["99","100"],"import { gql, useQuery } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Avatar } from '../components/Avatar';\nimport { Button } from '../components/Button';\nimport { TripCard } from '../components/Card-trip';\nimport { CommonHeader } from '../components/Header-common';\nimport { CreateTripModal } from '../components/Modal-create-trip';\nimport { useWhoAmI } from '../hooks/useWhoAmI';\nimport {\n  readTripsQuery,\n  readTripsQueryVariables,\n} from '../__generated__/readTripsQuery';\n\nconst READ_TRIPS_QUERY = gql`\n  query readTripsQuery($input: ReadTripsInput!) {\n    readTrips(input: $input) {\n      ok\n      error\n      targetUser {\n        firstName\n        lastName\n        about\n        city\n        avatarUrl\n        followers {\n          id\n        }\n        followings {\n          id\n        }\n        trips {\n          name\n          startDate\n        }\n      }\n    }\n  }\n`;\n\ninterface IPrams {\n  username: string;\n}\n\nexport const Trips = () => {\n  const [isCreateTrip, setIsCreateTrip] = useState(true);\n  const { username: targetUsername } = useParams<IPrams>();\n  console.log(targetUsername);\n  const { data: whoAmIResult } = useWhoAmI();\n  const { data, loading } = useQuery<readTripsQuery, readTripsQueryVariables>(\n    READ_TRIPS_QUERY,\n    { variables: { input: { targetUsername: targetUsername.toLowerCase() } } },\n  );\n  const isSelf = targetUsername.toLowerCase() === whoAmIResult?.whoAmI.slug;\n  return (\n    <div>\n      {isCreateTrip && <CreateTripModal setIsCreateTrip={setIsCreateTrip} />}\n      <CommonHeader />\n      <div className=\"grid grid-cols-tripsPage\">\n        <section className=\"grid overflow-y-scroll\">\n          <div className=\"relative p-5 flex flex-col items-center\">\n            <div\n              style={{\n                backgroundImage:\n                  'url(\"andreas-gucklhorn-mawU2PoJWfU-unsplash.jpg\")',\n                filter: 'blur(2px)',\n                zIndex: -2,\n              }}\n              className=\"absolute top-0 w-full h-full bg-cover bg-center\"\n            ></div>\n            <div\n              style={{ zIndex: -1 }}\n              className=\"absolute top-0 w-full h-full bg-myGreen-darkest opacity-80\"\n            ></div>\n            <Avatar size={16} />\n            <h2 className=\"mt-2 mb-1 text-white text-xl font-semibold\">\n              {data?.readTrips.targetUser?.firstName}{' '}\n              {data?.readTrips.targetUser?.lastName}\n            </h2>\n            <h6 className=\"mb-3 text-myGray-dark text-xs\">\n              {data?.readTrips.targetUser?.city ?? 'Somewhere in the world'}\n            </h6>\n            {data?.readTrips.targetUser?.about && (\n              <p className=\"mb-3 text-white text-sm text-center\">\n                {data?.readTrips.targetUser.about}\n              </p>\n            )}\n            <div className=\"mt-4\">\n              <Button\n                text={`${\n                  data?.readTrips.targetUser?.followers.length === 1\n                    ? data?.readTrips.targetUser?.followers.length + ' follower'\n                    : data?.readTrips.targetUser?.followers.length +\n                      ' followers'\n                }`}\n                type=\"white-regular\"\n                size=\"sm\"\n                className=\"mr-2\"\n              />\n              <Button\n                text={`${data?.readTrips.targetUser?.followings.length} following`}\n                type=\"white-regular\"\n                size=\"sm\"\n              />\n            </div>\n          </div>\n          <div className=\"bg-gradient-to-br from-myBlue to-myBlue-light\">\n            <button className=\"w-1/2 py-4 text-white font-semibold focus:outline-none\">\n              Trips\n            </button>\n            <button className=\"w-1/2 py-4 text-white font-semibold focus:outline-none\">\n              Statistics\n            </button>\n          </div>\n          <div className=\"px-3 py-5\">\n            <div className=\"w-full mb-5 flex justify-center\">\n              <Button\n                text=\"Add a past, current or future trip\"\n                type=\"blue-regular\"\n                size=\"sm\"\n                onClick={() => setIsCreateTrip(true)}\n              />\n            </div>\n            <ul className=\"grid gap-y-3\">\n              {data?.readTrips.targetUser?.trips.map((_, i) => (\n                <TripCard key={i} />\n              ))}\n            </ul>\n          </div>\n        </section>\n        <section>map</section>\n      </div>\n    </div>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Header-common.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Card-trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modal-create-trip.tsx",["101","102"],"/home/jonganebski/github/polartypes-frontend/src/components/Icon-close-modal.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Calendar.tsx",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":23},{"ruleId":"107","severity":1,"message":"111","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":25},{"ruleId":"107","severity":1,"message":"112","line":9,"column":10,"nodeType":"109","messageId":"110","endLine":9,"endColumn":19},{"ruleId":"107","severity":1,"message":"113","line":50,"column":17,"nodeType":"109","messageId":"110","endLine":50,"endColumn":24},{"ruleId":"107","severity":1,"message":"114","line":54,"column":9,"nodeType":"109","messageId":"110","endLine":54,"endColumn":15},{"ruleId":"107","severity":1,"message":"115","line":51,"column":10,"nodeType":"109","messageId":"110","endLine":51,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":51,"column":30,"nodeType":"118","messageId":"119","endLine":51,"endColumn":32},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'faTimesCircle' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'useWhoAmI' is defined but never used.","'loading' is assigned a value but never used.","'isSelf' is assigned a value but never used.","'createTripMutation' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]