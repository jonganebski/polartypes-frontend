[{"/home/jonganebski/github/polartypes-frontend/src/index.tsx":"1","/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts":"2","/home/jonganebski/github/polartypes-frontend/src/components/App.tsx":"3","/home/jonganebski/github/polartypes-frontend/src/router/router.tsx":"4","/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx":"5","/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx":"6","/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx":"7","/home/jonganebski/github/polartypes-frontend/src/apollo.ts":"8","/home/jonganebski/github/polartypes-frontend/src/constants.ts":"9","/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx":"10","/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx":"11","/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx":"12","/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx":"13","/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx":"14","/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts":"15","/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx":"16","/home/jonganebski/github/polartypes-frontend/src/pages/Trip.tsx":"17","/home/jonganebski/github/polartypes-frontend/src/components/Button-add-step.tsx":"18","/home/jonganebski/github/polartypes-frontend/src/helpers.ts":"19","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signin.tsx":"20","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signup.tsx":"21","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-trip.tsx":"22","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Set-time-zone.tsx":"23","/home/jonganebski/github/polartypes-frontend/src/components/Cards/Trip.tsx":"24","/home/jonganebski/github/polartypes-frontend/src/components/Cards/Step.tsx":"25","/home/jonganebski/github/polartypes-frontend/src/components/Headers/HomeHeader.tsx":"26","/home/jonganebski/github/polartypes-frontend/src/components/Headers/CommonHeader.tsx":"27","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Background.tsx":"28","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/CloseIcon.tsx":"29","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Calendar.tsx":"30","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Clock.tsx":"31","/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comments.tsx":"32","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/FilesArea.tsx":"33","/home/jonganebski/github/polartypes-frontend/src/hooks/useDragNDrop-file.ts":"34","/home/jonganebski/github/polartypes-frontend/src/hooks/useDragNDrop-image.ts":"35","/home/jonganebski/github/polartypes-frontend/src/hooks/useCreateStep.tsx":"36","/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateStep.tsx":"37","/home/jonganebski/github/polartypes-frontend/src/hooks/useDeleteStep.tsx":"38","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Save-step.tsx":"39","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/partials/Day.tsx":"40","/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comment.tsx":"41","/home/jonganebski/github/polartypes-frontend/src/hooks/useTrip.tsx":"42","/home/jonganebski/github/polartypes-frontend/src/hooks/useTrips.tsx":"43","/home/jonganebski/github/polartypes-frontend/src/components/Map/Map.tsx":"44","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Map-event-fns.tsx":"45","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Image-marker.tsx":"46","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Plain-marker.tsx":"47","/home/jonganebski/github/polartypes-frontend/src/context.tsx":"48","/home/jonganebski/github/polartypes-frontend/src/hooks/useFollow.tsx":"49","/home/jonganebski/github/polartypes-frontend/src/hooks/useUnfollow.tsx":"50","/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts":"51","/home/jonganebski/github/polartypes-frontend/src/components/Trip-status.tsx":"52","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Dynamic-polylines.tsx":"53","/home/jonganebski/github/polartypes-frontend/src/components/Options.tsx":"54","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Settings.tsx":"55","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Profile.tsx":"56","/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Account.tsx":"57"},{"size":791,"mtime":1609326157660,"results":"58","hashOfConfig":"59"},{"size":425,"mtime":1608450751420,"results":"60","hashOfConfig":"59"},{"size":132,"mtime":1608710051560,"results":"61","hashOfConfig":"59"},{"size":967,"mtime":1609308642730,"results":"62","hashOfConfig":"59"},{"size":2556,"mtime":1609335576660,"results":"63","hashOfConfig":"59"},{"size":195,"mtime":1608536237160,"results":"64","hashOfConfig":"59"},{"size":2139,"mtime":1609334355160,"results":"65","hashOfConfig":"59"},{"size":970,"mtime":1609050512200,"results":"66","hashOfConfig":"59"},{"size":526,"mtime":1609234115020,"results":"67","hashOfConfig":"59"},{"size":480,"mtime":1608870180250,"results":"68","hashOfConfig":"59"},{"size":7557,"mtime":1609570867360,"results":"69","hashOfConfig":"59"},{"size":904,"mtime":1608590422580,"results":"70","hashOfConfig":"59"},{"size":360,"mtime":1609140998700,"results":"71","hashOfConfig":"59"},{"size":397,"mtime":1609382825290,"results":"72","hashOfConfig":"59"},{"size":1197,"mtime":1608773922930,"results":"73","hashOfConfig":"59"},{"size":570,"mtime":1608683859040,"results":"74","hashOfConfig":"59"},{"size":11444,"mtime":1609570862030,"results":"75","hashOfConfig":"59"},{"size":1023,"mtime":1609251094630,"results":"76","hashOfConfig":"59"},{"size":1514,"mtime":1609587555150,"results":"77","hashOfConfig":"59"},{"size":4189,"mtime":1608808552000,"results":"78","hashOfConfig":"59"},{"size":5224,"mtime":1608808552770,"results":"79","hashOfConfig":"59"},{"size":12439,"mtime":1609207619350,"results":"80","hashOfConfig":"59"},{"size":3940,"mtime":1608808554550,"results":"81","hashOfConfig":"59"},{"size":2588,"mtime":1608983721910,"results":"82","hashOfConfig":"59"},{"size":7327,"mtime":1609307982160,"results":"83","hashOfConfig":"59"},{"size":1186,"mtime":1608808312077,"results":"84","hashOfConfig":"59"},{"size":2489,"mtime":1609334807610,"results":"85","hashOfConfig":"59"},{"size":346,"mtime":1608808547467,"results":"86","hashOfConfig":"59"},{"size":591,"mtime":1608808437185,"results":"87","hashOfConfig":"59"},{"size":7845,"mtime":1609207697170,"results":"88","hashOfConfig":"59"},{"size":2916,"mtime":1609213321170,"results":"89","hashOfConfig":"59"},{"size":3737,"mtime":1609164373710,"results":"90","hashOfConfig":"59"},{"size":5526,"mtime":1609112071790,"results":"91","hashOfConfig":"59"},{"size":3944,"mtime":1609112067730,"results":"92","hashOfConfig":"59"},{"size":1692,"mtime":1609112069650,"results":"93","hashOfConfig":"59"},{"size":2726,"mtime":1609324228110,"results":"94","hashOfConfig":"59"},{"size":1944,"mtime":1609214150960,"results":"95","hashOfConfig":"59"},{"size":2154,"mtime":1609213352400,"results":"96","hashOfConfig":"59"},{"size":19841,"mtime":1609226946500,"results":"97","hashOfConfig":"59"},{"size":625,"mtime":1609119567670,"results":"98","hashOfConfig":"59"},{"size":3545,"mtime":1609316337300,"results":"99","hashOfConfig":"59"},{"size":1415,"mtime":1609324208950,"results":"100","hashOfConfig":"59"},{"size":1067,"mtime":1609324794910,"results":"101","hashOfConfig":"59"},{"size":6052,"mtime":1609332763190,"results":"102","hashOfConfig":"59"},{"size":1122,"mtime":1609326749720,"results":"103","hashOfConfig":"59"},{"size":1284,"mtime":1609308199360,"results":"104","hashOfConfig":"59"},{"size":1053,"mtime":1609317310630,"results":"105","hashOfConfig":"59"},{"size":1637,"mtime":1609326399230,"results":"106","hashOfConfig":"59"},{"size":1548,"mtime":1609324218510,"results":"107","hashOfConfig":"59"},{"size":1579,"mtime":1609324202420,"results":"108","hashOfConfig":"59"},{"size":3750,"mtime":1609585676630,"results":"109","hashOfConfig":"59"},{"size":3548,"mtime":1609326776210,"results":"110","hashOfConfig":"59"},{"size":1929,"mtime":1609331171920,"results":"111","hashOfConfig":"59"},{"size":3664,"mtime":1609588017110,"results":"112","hashOfConfig":"59"},{"size":7308,"mtime":1609588612930,"results":"113","hashOfConfig":"59"},{"size":4795,"mtime":1609566646670,"results":"114","hashOfConfig":"59"},{"size":5906,"mtime":1609584612160,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"wm2czq",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"/home/jonganebski/github/polartypes-frontend/src/index.tsx",[],["236","237"],"/home/jonganebski/github/polartypes-frontend/src/reportWebVitals.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/App.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/router/router.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Home.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Form-error.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/apollo.ts",[],"/home/jonganebski/github/polartypes-frontend/src/constants.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Loading-spinner.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trips.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Logo.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Avatar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useWhoAmI.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useGeocoder.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateAccount.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/pages/Trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Button-add-step.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/helpers.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signin.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Signup.tsx",["238","239"],"import { gql, useMutation } from '@apollo/client';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { authTokenVar, isLoggedInVar } from '../../apollo';\nimport {\n  AZ_NUM_PATTERN,\n  EMAIL_PATTERN,\n  PW_MIN_LENGTH,\n  TOKEN,\n} from '../../constants';\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from '../../__generated__/createAccountMutation';\nimport { Button } from '../Button';\nimport { FormError } from '../Form-error';\nimport { ModalCloseIcon } from './partials/CloseIcon';\nimport { ModalBackground } from './partials/Background';\n\nconst CREATE_ACCOUNT_MUTAION = gql`\n  mutation createAccountMutation($input: CreateAccountInput!) {\n    createAccount(input: $input) {\n      ok\n      error\n      token\n      username\n    }\n  }\n`;\n\ninterface ISignupModalProps {\n  setIsSignup: React.Dispatch<React.SetStateAction<boolean | null>>;\n}\n\ninterface IFormProps {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\nexport const SignupModal: React.FC<ISignupModalProps> = ({ setIsSignup }) => {\n  const history = useHistory();\n  const {\n    register,\n    getValues,\n    formState,\n    handleSubmit,\n    errors,\n  } = useForm<IFormProps>({ mode: 'onChange' });\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok, error, token, username },\n    } = data;\n    if (ok && token && username && !error) {\n      localStorage.setItem(TOKEN, token);\n      authTokenVar(token);\n      isLoggedInVar(true);\n      history.push(`/${username}`);\n    }\n  };\n  const [\n    createAccountMutation,\n    { loading, data: mutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTAION,\n    { onCompleted },\n  );\n  const onSubmit = () => {\n    createAccountMutation({ variables: { input: { ...getValues() } } });\n  };\n  return (\n    <>\n      <ModalBackground onClick={() => setIsSignup(null)} />\n      <div className=\"modal\">\n        <ModalCloseIcon onClick={() => setIsSignup(null)} />\n        <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n          New account\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-y-5 p-6\">\n          <div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <input\n                ref={register({\n                  required: 'Your first name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"First name\"\n                className=\"input w-full\"\n              />\n              <input\n                ref={register({\n                  required: 'Your last name is required.',\n                  pattern: AZ_NUM_PATTERN,\n                })}\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                className=\"input w-full\"\n              />\n            </div>\n            {(errors.firstName?.message || errors.lastName?.message) && (\n              <div className=\"grid grid-cols-2 gap-2\">\n                <FormError err={errors.firstName?.message} />\n                <FormError err={errors.lastName?.message} />\n              </div>\n            )}\n          </div>\n          <div className=\"grid\">\n            <input\n              ref={register({\n                required: 'Your e-mail address is required.',\n                pattern: EMAIL_PATTERN,\n              })}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"input\"\n            />\n            {errors.email?.message && <FormError err={errors.email.message} />}\n          </div>\n          <div className=\"grid mb-2\">\n            <input\n              ref={register({\n                required: 'You need to enter a password.',\n                minLength: PW_MIN_LENGTH,\n              })}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input\"\n            />\n            {errors.password?.message && (\n              <FormError err={errors.password?.message} />\n            )}\n          </div>\n          {mutationResult?.createAccount.error && (\n            <FormError err={mutationResult.createAccount.error} />\n          )}\n          <Button\n            text=\"Sign up\"\n            type=\"red-solid\"\n            disabled={!formState.isValid}\n            loading={loading}\n          />\n        </form>\n        <div className=\"p-6 text-center bg-myGray-lightest border-t border-t-myGray-light rounded-b-2xl hover:bg-myGray-light\">\n          <span className=\"text-myGray-dark text-sm mr-1\">\n            Already have a Polartypes account?\n          </span>\n          <span\n            onClick={() => {\n              setIsSignup(false);\n            }}\n            className=\"text-myBlue text-sm underline cursor-pointer\"\n          >\n            Log in\n          </span>\n        </div>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Modals/Create-trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Set-time-zone.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/Trip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/Step.tsx",["240"],"import { gql, useMutation } from '@apollo/client';\nimport { faHeart, faComment } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { client } from '../../apollo';\nimport { useStepIdContext } from '../../context';\nimport { useWhoAmI } from '../../hooks/useWhoAmI';\nimport { readTripQuery_readTrip_trip_steps } from '../../__generated__/readTripQuery';\nimport { toggledLikeStep } from '../../__generated__/toggledLikeStep';\nimport {\n  toggleLikeMutation,\n  toggleLikeMutationVariables,\n} from '../../__generated__/toggleLikeMutation';\nimport { Avatar } from '../Avatar';\nimport { Button } from '../Button';\nimport { Comments } from './partials/Comments';\n\nconst TOGGLE_LIKE_MUTATION = gql`\n  mutation toggleLikeMutation($input: ToggleLikeInput!) {\n    toggleLike(input: $input) {\n      ok\n      error\n      toggle\n    }\n  }\n`;\n\ninterface IStepProps {\n  step: readTripQuery_readTrip_trip_steps;\n  setEditingStep: React.Dispatch<\n    React.SetStateAction<readTripQuery_readTrip_trip_steps | null>\n  >;\n  setIsSaveStepModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const StepCard: React.FC<IStepProps> = ({\n  step,\n  setEditingStep,\n  setIsSaveStepModal,\n}) => {\n  const { data: userData } = useWhoAmI();\n  const { setIdFromDrag } = useStepIdContext();\n  const isSelf = userData?.whoAmI.id === step.traveler.id;\n  const liRef = useRef<HTMLLIElement | null>(null);\n  useEffect(() => {\n    const buildThresholdList = () => {\n      let thresholds = [];\n      let numSteps = 20;\n      for (let i = 1.0; i <= numSteps; i++) {\n        let ratio = i / numSteps;\n        thresholds.push(ratio);\n      }\n      thresholds.push(0);\n      return thresholds;\n    };\n    if (liRef.current) {\n      let prevRatio = 0.5;\n      const handleIntersect = (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n          if (\n            entry.intersectionRatio > prevRatio &&\n            entry.intersectionRatio > 0.5\n          ) {\n            setIdFromDrag(entry.target.id);\n          }\n          prevRatio = entry.intersectionRatio;\n        });\n      };\n      const intersectionObserver = new IntersectionObserver(handleIntersect, {\n        threshold: buildThresholdList(),\n      });\n      intersectionObserver.observe(liRef.current);\n    }\n  }, [setIdFromDrag]);\n  const [isCommentBox, setIsCommentBox] = useState(false);\n  const commentsCount = step.comments.length;\n  const onCompleted = (data: toggleLikeMutation) => {\n    const {\n      toggleLike: { ok, error, toggle },\n    } = data;\n    if (ok && !error && toggle) {\n      const prevStep = client.readFragment<toggledLikeStep>({\n        id: `Step:${step.id}`,\n        fragment: gql`\n          fragment toggledLikeStep on Step {\n            likes {\n              user {\n                username\n              }\n            }\n          }\n        `,\n      });\n      if (prevStep && userData) {\n        const username = userData.whoAmI.username;\n        let likes = prevStep?.likes.slice();\n        console.log(likes);\n        if (0 < toggle) {\n          likes.unshift({\n            __typename: 'Like',\n            user: { __typename: 'Users', username },\n          });\n        } else {\n          likes = likes.filter((like) => like.user.username !== username);\n        }\n        client.writeFragment<toggledLikeStep>({\n          id: `Step:${step.id}`,\n          fragment: gql`\n            fragment toggledLikeStep on Step {\n              likes {\n                user {\n                  username\n                }\n              }\n            }\n          `,\n          data: {\n            __typename: 'Step',\n            likes,\n          },\n        });\n      }\n    }\n  };\n\n  const [toggleLikeMutation, { loading: toggleLikeLoading }] = useMutation<\n    toggleLikeMutation,\n    toggleLikeMutationVariables\n  >(TOGGLE_LIKE_MUTATION, { onCompleted });\n  return (\n    <li\n      id={step.id + ''}\n      ref={liRef}\n      className=\"pt-6 px-6 border bg-white border-myGray-light rounded-xl\"\n    >\n      <div>\n        <h2 className=\"mb-1 text-myGreen-darkest text-2xl font-semibold\">\n          {step.name}\n        </h2>\n        <div className=\"mb-3 flex items-center text-myGray-dark text-sm\">\n          <span>{step.country}</span>\n          <div className=\"inline-block mx-2 text-myGray\">•</div>\n          <span>\n            {moment(step.arrivedAt).tz(step.timeZone).format('d MMMM YYYY')}\n          </span>\n        </div>\n      </div>\n      <p className=\"mb-3 text-myGray-darkest whitespace-pre-wrap\">\n        {step.story}\n      </p>\n      <div className=\"mb-4 grid gap-y-3\">\n        {step.imgUrls?.map((url, i) => (\n          <div\n            key={i}\n            style={{\n              backgroundImage: `url(${url})`,\n            }}\n            className=\"pt-imageRatio bg-cover bg-center\"\n          ></div>\n        ))}\n      </div>\n      {step.likes.length !== 0 && (\n        <div className=\"p-3 flex items-center border-t border-b border-myGray-light\">\n          <Avatar avatarUrl={step.likes[0].user.avatarUrl} size={8} />\n          <span className=\"ml-3 text-sm text-myGray-darkest\">\n            {step.likes.slice(0, 5).map((like, i) => (\n              <Link key={i} to=\"#\" className=\"text-myGreen-darkest\">\n                {i === step.likes.slice(0, 5).length - 1\n                  ? like.user.username + ' '\n                  : like.user.username + ', '}\n              </Link>\n            ))}\n            {step.likes.length - 5 < 0\n              ? 'like this trip'\n              : `and ${step.likes.length - 5} others like this step.`}\n          </span>\n        </div>\n      )}\n      <div className=\"py-4 flex justify-between\">\n        <div>\n          <Button\n            text=\"Like\"\n            type=\"white-solid\"\n            size=\"sm\"\n            className=\"mr-2\"\n            disabled={toggleLikeLoading}\n            icon={\n              <FontAwesomeIcon\n                icon={faHeart}\n                className={`mr-2 ${\n                  step.likes.some(\n                    (like) => like.user.username === userData?.whoAmI.username,\n                  )\n                    ? 'text-myRed'\n                    : 'text-myBlue'\n                }`}\n              />\n            }\n            onClick={(e) => {\n              toggleLikeMutation({ variables: { input: { id: step.id } } });\n            }}\n          />\n          <Button\n            text={\n              commentsCount === 0\n                ? 'Comment'\n                : commentsCount === 1\n                ? '1 Comment'\n                : `${commentsCount} Comments`\n            }\n            onClick={() => setIsCommentBox((prev) => !prev)}\n            type=\"white-solid\"\n            size=\"sm\"\n            icon={\n              <FontAwesomeIcon icon={faComment} className=\"text-myBlue mr-2\" />\n            }\n          />\n        </div>\n        {isSelf && (\n          <Button\n            text=\"Edit step\"\n            type=\"blue-solid\"\n            size=\"sm\"\n            onClick={() => {\n              setIsSaveStepModal(true);\n              setEditingStep(step);\n            }}\n          />\n        )}\n      </div>\n      {isCommentBox && <Comments step={step} />}\n    </li>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Headers/HomeHeader.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Headers/CommonHeader.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Background.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/CloseIcon.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Calendar.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/Clock.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comments.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/FilesArea.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useDragNDrop-file.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useDragNDrop-image.ts",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useCreateStep.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useUpdateStep.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useDeleteStep.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Save-step.tsx",["241","242","243"],"import {\n  faCalendar,\n  faClock,\n  faTrashAlt,\n} from '@fortawesome/free-regular-svg-icons';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\nimport { deleteFiles, getTimeZone } from '../../helpers';\nimport { useCreateStep } from '../../hooks/useCreateStep';\nimport { useDeleteStep } from '../../hooks/useDeleteStep';\nimport { useGeocoder } from '../../hooks/useGeocoder';\nimport { useUpdateStep } from '../../hooks/useUpdateStep';\nimport { readTripQuery_readTrip_trip_steps } from '../../__generated__/readTripQuery';\nimport { Button } from '../Button';\nimport { Clock } from '../Tooltips/Clock';\nimport { NewCalendar } from '../Tooltips/Calendar';\nimport { ModalCloseIcon } from './partials/CloseIcon';\nimport { FilesArea } from './partials/FilesArea';\nimport { ICreateStepFormProps } from '../../pages/Trip';\n\ninterface ISaveStepModalProps {\n  tripId: string;\n  tripStartDate: string;\n  tripEndDate: string | null;\n  belowStepDate: string;\n  belowStepTimeZone: string;\n  setIsSaveStepModal: React.Dispatch<React.SetStateAction<boolean>>;\n  editingStep: readTripQuery_readTrip_trip_steps | null;\n}\n\nexport type TImage = { id?: string; src?: string; url?: string };\n\nexport const SaveStepModal: React.FC<ISaveStepModalProps> = ({\n  tripId,\n  tripStartDate,\n  tripEndDate,\n  belowStepDate,\n  belowStepTimeZone,\n  setIsSaveStepModal,\n  editingStep,\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isLocationBlock, setIsLocationBlock] = useState(false);\n  const [uploadErr, setUploadErr] = useState('');\n  const [isPopupCalendar, setIsPopupCalendar] = useState<boolean | null>(null);\n  const [images, setImages] = useState<TImage[]>(\n    editingStep?.imgUrls?.map((url) => ({ url })) ?? [],\n  );\n  const [imagesRecord, setImagesRecord] = useState<TImage[]>(images);\n  const f = useFormContext<ICreateStepFormProps>();\n  const { setValue, getValues, handleSubmit, register, watch, formState } = f;\n  const [\n    createStepMutation,\n    { loading: createStepMutationLoading },\n  ] = useCreateStep(f, tripId, images, setIsSaveStepModal);\n\n  const [\n    updateStepMutation,\n    { loading: updateStepMutaionLoading },\n  ] = useUpdateStep(f, editingStep, images, setIsSaveStepModal);\n\n  const [\n    deleteStepMutation,\n    { loading: deleteStepMutaionLoading },\n  ] = useDeleteStep(f, tripId, images, setIsSaveStepModal);\n\n  const { geocodeData, setGeocodeData } = useGeocoder(searchTerm);\n\n  const onLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value);\n  };\n\n  const cleanupUnusedImageFilesOnCancel = useCallback(() => {\n    if (imagesRecord.length === 0 || !imagesRecord.some((image) => image.url)) {\n      return;\n    }\n    console.log('cleanupUnusedImageFilesOnCancel starting...');\n    const urls: string[] = [];\n    if (editingStep) {\n      imagesRecord.forEach((image) => {\n        if (!image.url) {\n          return;\n        }\n        const isUsedImage = editingStep.imgUrls?.some(\n          (url) => url === image.url,\n        );\n        console.log(image, isUsedImage);\n        if (!isUsedImage) {\n          urls.push(image.url);\n        }\n      });\n    } else {\n      imagesRecord.forEach((image) => image.url && urls.push(image.url));\n    }\n    console.log('deleting files in s3: ', urls);\n    urls.length !== 0 && deleteFiles(urls);\n  }, [editingStep, imagesRecord]);\n\n  const cleanupUnusedImageFilesOnEditSubmit = () => {\n    if (imagesRecord.length === 0 || !imagesRecord.some((image) => image.url)) {\n      return;\n    }\n    console.log('cleanupUnusedImageFilesOnEditSubmit starting...');\n    const urls: string[] = [];\n    imagesRecord.forEach((image) => {\n      if (!image.url) {\n        return;\n      }\n      const isUsedImage = images.some((img) => img.url === image.url);\n      console.log(image, isUsedImage);\n      if (!isUsedImage) {\n        urls.push(image.url);\n      }\n    });\n    console.log('deleting files in s3: ', urls);\n    urls.length !== 0 && deleteFiles(urls);\n  };\n\n  const onSubmit = () => {\n    const { lat, lon, ...values } = getValues();\n    const imgUrls = images.reduce((acc, img) => {\n      if (img.url) {\n        return [...acc, img.url];\n      } else {\n        return acc;\n      }\n    }, [] as string[]);\n    if (editingStep) {\n      console.log('updateStepMutation starting...');\n      cleanupUnusedImageFilesOnEditSubmit();\n      updateStepMutation({\n        variables: {\n          input: {\n            ...values,\n            stepId: editingStep.id,\n            lat: +lat,\n            lon: +lon,\n            imgUrls,\n          },\n        },\n      });\n    } else {\n      console.log('createStepMutation starting...');\n      createStepMutation({\n        variables: {\n          input: {\n            ...values,\n            tripId: +tripId,\n            lat: +lat,\n            lon: +lon,\n            imgUrls,\n          },\n        },\n      });\n    }\n  };\n\n  const onModalClose = useCallback(() => {\n    if (isUploading) {\n      return;\n    }\n    cleanupUnusedImageFilesOnCancel();\n    setIsSaveStepModal(false);\n  }, [cleanupUnusedImageFilesOnCancel, isUploading, setIsSaveStepModal]);\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', cleanupUnusedImageFilesOnCancel);\n    return () =>\n      window.removeEventListener(\n        'beforeunload',\n        cleanupUnusedImageFilesOnCancel,\n      );\n  }, [cleanupUnusedImageFilesOnCancel]);\n\n  useEffect(() => {\n    if (editingStep) {\n      setValue('arrivedAt', editingStep.arrivedAt, { shouldValidate: true });\n      setValue('country', editingStep.country, { shouldValidate: true });\n      setValue('lat', editingStep.lat.toString(), { shouldValidate: true });\n      setValue('lon', editingStep.lon.toString(), { shouldValidate: true });\n      setValue('location', editingStep.location, { shouldValidate: true });\n      setValue('name', editingStep.name, { shouldValidate: true });\n      setValue('story', editingStep.story ?? '', { shouldValidate: true });\n      setValue('timeZone', editingStep.timeZone, { shouldValidate: true });\n    } else {\n      setValue('arrivedAt', belowStepDate, { shouldValidate: true });\n    }\n  }, [belowStepDate, editingStep, setValue]);\n  console.log(formState.isValid);\n  return (\n    <>\n      <div className=\"absolute z-50 top-0 left-0 w-full h-full bg-myGreen-darkest bg-opacity-80\"></div>\n      <div className=\"absolute z-50 top-0 left-0 w-full h-screenExceptHeader overflow-y-scroll\">\n        <div className=\"absolute top-2 left-1/2 transform -translate-x-1/2 w-11/12 bg-white rounded-2xl\">\n          <ModalCloseIcon onClick={onModalClose} />\n          <div className=\"py-6 text-center text-2xl text-myGreen-darkest font-semibold border-b\">\n            {editingStep ? 'Edit step' : 'New Trip'}\n          </div>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"p-6\">\n            <section className=\"relative p-6 mb-4 grid grid-cols-oneToTwo bg-myGray-dark rounded-2xl\">\n              <div>\n                <h3 className=\"text-white font-semibold\">Location</h3>\n                <span className=\"block text-sm font-medium text-myGray-light\">\n                  Search\n                </span>\n                <span className=\"text-sm font-medium text-myGray-light\">\n                  or click the map\n                </span>\n              </div>\n              <div className=\"rounded-sm\">\n                <div className=\"relative\">\n                  <input\n                    onChange={onLocationChange}\n                    ref={register({ required: true })}\n                    name=\"location\"\n                    placeholder=\"Enter a location\"\n                    autoComplete=\"off\"\n                    className=\"input w-full border-transparent rounded-b-none\"\n                  />\n                  <div className=\"absolute z-10 w-full flex flex-col bg-white\">\n                    {geocodeData?.map((d: any, i: number) => {\n                      return (\n                        <div\n                          key={i}\n                          onClick={async () => {\n                            const lat = (+d.point?.lat)?.toFixed(6);\n                            const lon = (+d.point?.lng)?.toFixed(6);\n                            setValue('location', d.name, {\n                              shouldValidate: true,\n                            });\n                            setValue('lat', lat, { shouldValidate: true });\n                            setValue('lon', lon, { shouldValidate: true });\n                            setValue('country', d.country, {\n                              shouldValidate: true,\n                            });\n                            setGeocodeData(null);\n                          }}\n                          className=\"px-4 py-2 cursor-pointer text-sm hover:bg-myGray-lightest\"\n                        >\n                          <span className=\"mr-2\">{d.name}</span>\n                          <span className=\"text-myGray\">{d.country}</span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"p-2 pl-4 flex bg-white text-myGray-darkest text-sm\">\n                  <div className=\"flex items-center border-r border-myGray-light\">\n                    <span className=\"font-semibold\">Lat:</span>\n                    <input\n                      ref={register({ required: true })}\n                      name=\"lat\"\n                      placeholder=\"00,000000\"\n                      className=\"ml-1 w-full focus:outline-none\"\n                    />\n                  </div>\n                  <div className=\"pl-4 flex items-center\">\n                    <span className=\"font-semibold\">Lon:</span>\n                    <input\n                      ref={register({ required: true })}\n                      name=\"lon\"\n                      placeholder=\"00,000000\"\n                      className=\"ml-1 w-full focus:outline-none\"\n                    />\n                  </div>\n                  <div\n                    onClick={async () => {\n                      const { location, lat, lon } = getValues();\n                      if (location && lat && lon) {\n                        const { ok, error, timeZone } = await getTimeZone(\n                          lat,\n                          lon,\n                        );\n                        if (ok && !error && timeZone) {\n                          setValue('timeZone', timeZone);\n                        }\n                        setIsLocationBlock(true);\n                      }\n                    }}\n                    className=\"py-1.5 px-4 rounded-full bg-myBlue text-white cursor-pointer\"\n                  >\n                    Set\n                  </div>\n                </div>\n              </div>\n              {isLocationBlock && (\n                <div\n                  onClick={() => {\n                    setIsLocationBlock((prev) => !prev);\n                  }}\n                  className=\"absolute top-0 left-0 w-full h-full p-3 rounded-2xl text-sm bg-white bg-opacity-80 cursor-pointer group hover:bg-myBlue hover:bg-opacity-80\"\n                >\n                  <div className=\"text-transparent group-hover:text-white\">\n                    <FontAwesomeIcon icon={faPencilAlt} className=\"mr-2\" />\n                    <span>Edit info</span>\n                  </div>\n                </div>\n              )}\n            </section>\n            <section className=\"relative p-6 mb-6 grid grid-cols-oneToTwo gap-y-4 rounded-2xl shadow-surround\">\n              <h3 className=\"flex items-center text-myGreen-darkest font-semibold\">\n                Step name\n              </h3>\n              <div className=\"flex\">\n                <input\n                  ref={register({ required: true })}\n                  name=\"name\"\n                  placeholder=\"-\"\n                  className=\"input w-full rounded-r-none\"\n                />\n                <input\n                  ref={register({ required: true })}\n                  name=\"country\"\n                  readOnly\n                  style={{\n                    width: watch('country')?.length + 2 + 'ch',\n                  }}\n                  className=\"px-2 py-3 w-0 text-myGray-dark border border-l-0 border-myGray bg-myGray-light rounded-r-md rounded-l-none focus:outline-none\"\n                />\n              </div>\n              <h3 className=\"flex items-center text-myGreen-darkest font-semibold\">\n                Arrival Date & Time\n              </h3>\n              <div className=\"flex\">\n                <input\n                  ref={register({ required: true })}\n                  name=\"arrivedAt\"\n                  className=\"hidden\"\n                  readOnly\n                />\n                <div\n                  className={`relative mr-3 w-full border border-solid rounded-sm cursor-pointer focus:outline-none ${\n                    isPopupCalendar ? 'border-myBlue' : 'border-myGray'\n                  }`}\n                >\n                  <div\n                    className=\"px-4 py-3 flex items-center justify-between\"\n                    onClick={() =>\n                      setIsPopupCalendar((prev) => (prev ? null : true))\n                    }\n                  >\n                    <span>\n                      {getValues().arrivedAt && getValues().timeZone\n                        ? moment\n                            .tz(watch('arrivedAt'), watch('timeZone'))\n                            .format('MMM D YYYY')\n                        : ''}\n                    </span>\n                    <FontAwesomeIcon\n                      icon={faCalendar}\n                      className=\"text-myBlue text-xl\"\n                    />\n                  </div>\n                  {isPopupCalendar && getValues('timeZone') && (\n                    <NewCalendar\n                      name=\"arrivedAt\"\n                      timeZone={getValues('timeZone')}\n                      selectedDate={getValues('arrivedAt')}\n                      effectiveSince={tripStartDate}\n                      effectiveUntil={moment(tripEndDate)\n                        .add(1, 'days')\n                        .format()}\n                    />\n                  )}\n                </div>\n                <div\n                  className={`relative px-4 py-3 border border-solid rounded-sm cursor-pointer ${\n                    isPopupCalendar === false\n                      ? 'border-myBlue'\n                      : 'border-myGray'\n                  }`}\n                >\n                  <div\n                    onClick={() =>\n                      setIsPopupCalendar((prev) =>\n                        prev === false ? null : false,\n                      )\n                    }\n                    className=\"mr-3 w-full flex items-center justify-between whitespace-nowrap\"\n                  >\n                    <span>\n                      {getValues().arrivedAt && getValues().timeZone\n                        ? moment\n                            .tz(watch('arrivedAt'), watch('timeZone'))\n                            .format('HH : mm')\n                        : ''}\n                    </span>\n                    <FontAwesomeIcon\n                      icon={faClock}\n                      className=\"text-myBlue text-xl\"\n                    />\n                  </div>\n                  {isPopupCalendar === false && (\n                    <Clock timeZone={watch('timeZone')} />\n                  )}\n                  <input\n                    ref={register()}\n                    name=\"timeZone\"\n                    readOnly\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n              <h3 className=\"mt-3 text-myGreen-darkest font-semibold\">\n                Your story\n              </h3>\n              <textarea\n                ref={register()}\n                name=\"story\"\n                placeholder=\"What have you been up to?\"\n                className=\"resize-none px-4 py-3 h-48 border border-myGray rounded-sm focus:outline-none focus:border-myBlue\"\n              />\n              <h3 className=\"flex flex-col justify-center text-myGreen-darkest font-semibold\">\n                Add your photos\n                <span className=\"text-sm font-medium text-myGray-dark\">\n                  Drag'n drop to re-arrange\n                </span>\n              </h3>\n              <FilesArea\n                images={images}\n                setImages={setImages}\n                setImagesRecord={setImagesRecord}\n                isUploading={isUploading}\n                setIsUploading={setIsUploading}\n                uploadErr={uploadErr}\n                setUploadErr={setUploadErr}\n                editingStep={editingStep}\n              />\n              {!isLocationBlock && (\n                <div\n                  onClick={() => {\n                    const {\n                      location,\n                      lat,\n                      lon,\n                      country,\n                      timeZone,\n                    } = getValues();\n                    if (location && lat && lon && country && timeZone) {\n                      setIsLocationBlock((prev) => !prev);\n                    }\n                  }}\n                  className=\"absolute top-0 left-0 w-full h-full p-3 rounded-2xl text-sm bg-white bg-opacity-80 cursor-pointer group hover:bg-myBlue hover:bg-opacity-80\"\n                >\n                  <div className=\"text-transparent group-hover:text-white\">\n                    <FontAwesomeIcon icon={faPencilAlt} className=\"mr-2\" />\n                    <span>Edit info</span>\n                  </div>\n                </div>\n              )}\n            </section>\n            <div className=\"flex justify-between\">\n              <div>\n                <Button\n                  text={editingStep ? 'Save changes' : 'Add step'}\n                  type=\"red-solid\"\n                  loading={\n                    createStepMutationLoading || updateStepMutaionLoading\n                  }\n                  disabled={\n                    !formState.isValid ||\n                    isUploading ||\n                    createStepMutationLoading ||\n                    updateStepMutaionLoading\n                  }\n                  className=\"mr-4\"\n                />\n                <Button\n                  text=\"Cancel\"\n                  type=\"white-solid\"\n                  isSubmitBtn={false}\n                  disabled={\n                    isUploading ||\n                    createStepMutationLoading ||\n                    updateStepMutaionLoading\n                  }\n                  onClick={onModalClose}\n                />\n              </div>\n              {editingStep && (\n                <Button\n                  text=\"\"\n                  type=\"white-solid\"\n                  icon={\n                    <FontAwesomeIcon icon={faTrashAlt} className=\"text-lg\" />\n                  }\n                  fontColorClass=\"text-myRed\"\n                  isSubmitBtn={false}\n                  disabled={isUploading || updateStepMutaionLoading}\n                  onClick={() => {\n                    const isConfirmed = window.confirm(\n                      'You are deleting this step permanently. Are you sure?',\n                    );\n                    isConfirmed &&\n                      deleteStepMutation({\n                        variables: { input: { stepId: editingStep.id } },\n                      });\n                  }}\n                />\n              )}\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Tooltips/partials/Day.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Cards/partials/Comment.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useTrip.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useTrips.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Map/Map.tsx",["244"],"import L from 'leaflet';\nimport React, { useEffect, useState } from 'react';\nimport {\n  MapContainer,\n  MapContainerProps,\n  Polyline,\n  TileLayer,\n} from 'react-leaflet';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { sortSteps } from '../../helpers';\nimport { useLazyTrip } from '../../hooks/useTrip';\nimport { useLazyTrips } from '../../hooks/useTrips';\nimport { readTripQuery_readTrip_trip_steps } from '../../__generated__/readTripQuery';\nimport { readTripsQuery_readTrips_targetUser_trips_steps } from '../../__generated__/readTripsQuery';\nimport { DynamicPolylines } from './Partials/Dynamic-polylines';\nimport { ImageMarker } from './Partials/Image-marker';\nimport { MapEventFns } from './Partials/Map-event-fns';\nimport { PlainMarker } from './Partials/Plain-marker';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\ninterface IParams {\n  username: string;\n  tripId?: string;\n}\n\ninterface IMapProps {\n  isSaveStepModal?: boolean;\n  readingStepId?: number | null;\n  setReadingStepId?: React.Dispatch<React.SetStateAction<number | null>>;\n}\n\nexport const Map: React.FC<IMapProps> = ({ isSaveStepModal = false }) => {\n  const { username: targetUsername, tripId } = useParams<IParams>();\n  const history = useHistory();\n  const [bounds, setBounds] = useState<L.LatLngTuple[] | undefined>();\n  const [lazyTripQuery, { data: trip, called: tripCalled }] = useLazyTrip();\n  const [lazyTripsQuery, { data: trips, called: tripsCalled }] = useLazyTrips();\n\n  useEffect(() => {\n    if (tripId) {\n      lazyTripQuery({ variables: { input: { tripId: +tripId } } });\n    } else {\n      lazyTripsQuery({ variables: { input: { targetUsername } } });\n    }\n  }, [lazyTripQuery, lazyTripsQuery, targetUsername, tripId]);\n\n  useEffect(() => {\n    const getBounds = () => {\n      let bounds: L.LatLngTuple[] = [];\n      if (\n        tripsCalled &&\n        trips?.readTrips.targetUser?.trips &&\n        trips?.readTrips.targetUser?.trips.length !== 0\n      ) {\n        bounds = trips.readTrips.targetUser.trips.flatMap((trip) =>\n          getPositionsTripsCalled(trip.steps),\n        );\n        setBounds(bounds);\n      }\n      if (\n        tripCalled &&\n        trip?.readTrip.trip?.steps &&\n        trip?.readTrip.trip?.steps.length !== 0\n      ) {\n        bounds = getPositionsTripCalled(trip.readTrip.trip.steps);\n        setBounds(bounds);\n      }\n    };\n    (trips || trip) && getBounds();\n  }, [\n    trip,\n    tripCalled,\n    trips,\n    trips?.readTrips.targetUser?.trips,\n    tripsCalled,\n  ]);\n\n  const getPositionsTripsCalled = (\n    steps: readTripsQuery_readTrips_targetUser_trips_steps[],\n  ) => {\n    return steps\n      .slice()\n      .sort(sortSteps)\n      .map((step) => {\n        const { lat, lon } = step;\n        return [lat, lon] as L.LatLngTuple;\n      });\n  };\n\n  const getPositionsTripCalled = (steps: readTripQuery_readTrip_trip_steps[]) =>\n    steps\n      .slice()\n      .sort(sortSteps)\n      .map((step) => {\n        return [step.lat, step.lon] as L.LatLngTuple;\n      });\n  console.log(bounds);\n  // 여기 문제 있음.\n  if (!bounds) {\n    return (\n      <MapContainer\n        center={[20, 20]}\n        zoom={3}\n        style={{ height: '100%', width: '100%' }}\n      >\n        <TileLayer\n          accessToken={MAPBOX_TOKEN}\n          url={`https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/256/{z}/{x}/{y}@2x?access_token={accessToken}`}\n          attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery &copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n        />\n      </MapContainer>\n    );\n  }\n\n  return (\n    <MapContainer bounds={bounds} style={{ height: '100%', width: '100%' }}>\n      <TileLayer\n        accessToken={MAPBOX_TOKEN}\n        url={`https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/256/{z}/{x}/{y}@2x?access_token={accessToken}`}\n        attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery &copy; <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n      />\n      {tripCalled &&\n        trip?.readTrip.trip?.steps &&\n        trip?.readTrip.trip?.steps.length !== 0 && (\n          <>\n            <MapEventFns\n              isSaveStepModal={isSaveStepModal}\n              positions={getPositionsTripCalled(trip.readTrip.trip.steps)}\n            />\n            <DynamicPolylines steps={trip.readTrip.trip.steps} />\n            {trip?.readTrip.trip?.steps.map((step, i) => {\n              let imgUrl = '/blank-profile.webp';\n              if (step.imgUrls && step.imgUrls.length !== 0) {\n                imgUrl = step.imgUrls[0];\n              }\n              return <ImageMarker key={i} imgUrl={imgUrl} step={step} />;\n            })}\n          </>\n        )}\n      {tripsCalled &&\n        trips?.readTrips.targetUser?.trips &&\n        trips?.readTrips.targetUser?.trips.length !== 0 &&\n        trips.readTrips.targetUser.trips.map((trip, i) => {\n          return (\n            <React.Fragment key={i}>\n              <MapEventFns\n                isSaveStepModal={isSaveStepModal}\n                positions={getPositionsTripsCalled(trip.steps)}\n              />\n              <Polyline\n                pathOptions={{ color: 'white', weight: 2 }}\n                positions={getPositionsTripsCalled(trip.steps)}\n                eventHandlers={{\n                  click: () => {\n                    history.push(`/${targetUsername}/${trip.id}`);\n                  },\n                }}\n              />\n              {trip.steps.map((step, i) => {\n                return (\n                  <PlainMarker\n                    key={i}\n                    targetUsername={targetUsername}\n                    tripId={trip.id + ''}\n                    step={step}\n                  />\n                );\n              })}\n            </React.Fragment>\n          );\n        })}\n    </MapContainer>\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Map-event-fns.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Image-marker.tsx",["245"],"import L from 'leaflet';\nimport React, { useEffect } from 'react';\nimport { Marker, useMap } from 'react-leaflet';\nimport { useStepIdContext } from '../../../context';\nimport { readTripQuery_readTrip_trip_steps } from '../../../__generated__/readTripQuery';\n\ninterface IImageMarkerProps {\n  imgUrl: string;\n  step: readTripQuery_readTrip_trip_steps;\n}\n\nexport const ImageMarker: React.FC<IImageMarkerProps> = ({ imgUrl, step }) => {\n  const map = useMap();\n  const { idFromDrag, setIdFromMap } = useStepIdContext();\n  const isReadingThisStep = idFromDrag === step.id + '';\n\n  if (isReadingThisStep) {\n    map.setView(new L.LatLng(step.lat, step.lon), 7);\n  }\n\n  const generateIcon = () => {\n    const imageIcon = L.icon({\n      className: `border-2 border-white rounded-full bg-myGreen-dark bg-cover hover:shadow-imageMarker ${\n        isReadingThisStep && 'shadow-imageMarker'\n      }`,\n      iconUrl: imgUrl,\n      iconSize: L.point(30, 30),\n    });\n    return imageIcon;\n  };\n\n  const handleClick = () => {\n    setIdFromMap(step.id + '');\n    map.setView(new L.LatLng(step.lat, step.lon), 7);\n  };\n\n  return (\n    <Marker\n      icon={generateIcon()}\n      position={[step.lat, step.lon]}\n      riseOnHover\n      eventHandlers={{\n        click: handleClick,\n      }}\n    />\n  );\n};\n","/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Plain-marker.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/context.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useFollow.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/hooks/useUnfollow.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/__generated__/globalTypes.ts",[],"/home/jonganebski/github/polartypes-frontend/src/components/Trip-status.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Map/Partials/Dynamic-polylines.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Options.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/Settings.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Profile.tsx",[],"/home/jonganebski/github/polartypes-frontend/src/components/Modals/partials/Account.tsx",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":23},{"ruleId":"250","severity":1,"message":"254","line":3,"column":10,"nodeType":"252","messageId":"253","endLine":3,"endColumn":25},{"ruleId":"250","severity":1,"message":"255","line":5,"column":17,"nodeType":"252","messageId":"253","endLine":5,"endColumn":27},{"ruleId":"250","severity":1,"message":"256","line":10,"column":10,"nodeType":"252","messageId":"253","endLine":10,"endColumn":22},{"ruleId":"250","severity":1,"message":"257","line":10,"column":24,"nodeType":"252","messageId":"253","endLine":10,"endColumn":31},{"ruleId":"250","severity":1,"message":"258","line":68,"column":16,"nodeType":"252","messageId":"253","endLine":68,"endColumn":40},{"ruleId":"250","severity":1,"message":"259","line":5,"column":3,"nodeType":"252","messageId":"253","endLine":5,"endColumn":20},{"ruleId":"250","severity":1,"message":"260","line":2,"column":17,"nodeType":"252","messageId":"253","endLine":2,"endColumn":26},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"@typescript-eslint/no-unused-vars","'faTimesCircle' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'useContext' is defined but never used.","'FormProvider' is defined but never used.","'useForm' is defined but never used.","'deleteStepMutaionLoading' is assigned a value but never used.","'MapContainerProps' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]